"use strict";

const express = require("express");
const bodyParser = require("body-parser");
const cors = require('cors');


const app = express();
let server = null;
app.use(bodyParser.json());

/**
 * Enable CORS with a origin whitelist of valid domains
 * Step 1: Add CORS
 */
let allowedOrigins = ['http://localhost:4200'];
app.use(cors({
    origin: function (origin, callback) {
              
        if (!origin)
            return callback(null, true);

        if (allowedOrigins.indexOf(origin) === -1) {
            let msg = 'The CORS policy for this site does not allow access from the specified Origin.';
            return callback(new Error(msg), false);
        }
        return callback(null, true);
    }
}));

/**
 * Add all routes
 */
app.use(require("./controllers/user-controller"));
app.use(require("./controllers/login-controller"));
app.use(require("./controllers/post-controller"));
app.use(require("./controllers/picture-controller"));
app.use(require("./controllers/purchase-controller"));

app.use("*", (req, res, next) => {
  return res.status(404).send({
    message: "Se siente, tus amigos no están aquí"
  });
});

/**
 * Special route middleware to catch all next(err) generated by controllers
 */
app.use((err, req, res, next) => {
  if (err.name === "ValidationError") {
    return res.status(400).send(err);
  }

  if (err.name === "AuthenticatedError") {
    return res.status(401).send();
  }

  console.error("Error 500", err);
  return res.status(500).send({
    message: err.message
  });
});

/**
 * Start listening requests at a given port
 * @param {Number} port
 */
async function listen(port) {
  if (server === null) {
    server = await app.listen(port);
  } else {
    console.error("Can't listen, server already initialized");
  }
}

/**
 * Stop listening requests
 */
async function close() {
  if (server) {
    await server.close();
    server = null;
  } else {
    console.error("Can't close a non started server");
  }
}

module.exports = {
  listen,
  close
};
